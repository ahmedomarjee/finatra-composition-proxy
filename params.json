{"name":"Finatra Composition-Proxy","tagline":"Easily compose microservices into a rich REST API","body":"# Finatra composition proxy\r\n\r\n[*Finatra*](http://finatra.info/) is a *Scala* web framework inspired by *Sinatra* and build on top of *Twitter-Server*.\r\nAs such it provides rich metrics, templating and integrates well with [*Finagle*](https://twitter.github.io/finagle/), Twitter's protocol-agnostic async RPC system.\r\n[*Your Server as a Function*](http://monkey.org/~marius/funsrv.pdf), a great paper by Marius Eriksen, describes the philosophy behind *Finagle* and how *Futures*, *Services* and *Filters* play so well together.\r\n\r\n## Microservice composition\r\n\r\nThe past two years I've seen lots of companies starting to adapt the [*microservice*](http://martinfowler.com/articles/microservices.html) paradigm.\r\nAmong the various challenges, there's a lot of discussions around the *composition challenge*, regardless whether services shall be composed in a large website or into a single REST API.\r\n\r\nTalking about a single REST endpoint, the goal certainly shouldn't be to transform one monolith into another (your proxy) and build lots of beautiful manageable *microservice* around it.\r\nBut dealing with various devices, particularly talking about mobile, there certainly is an advantage in aggregating the various calls to a multitude of services into some few ones.\r\n\r\nNot long ago Clifton Cunningham presented [*Compoxure*](https://github.com/tes/compoxure) in [his blog](https://medium.com/@clifcunn/nodeconf-eu-29dd3ed500ec) to tackle the UI / website composition challenge:\r\n\r\nAlready some while ago Twitter presented [*Stitch*](https://www.youtube.com/watch?v=VVpmMfT8aYw), a library for composing *Finagle* services.\r\n*Stitch* provides a concise Scala query API which permits readable expression of application logic hiding the complexity of bulk RPC calls.\r\nThat way *Stitch* efficiently allows Twitter to build Services on top of other Services. But, unfortunately, *Stitch* is not open-sourced yet.\r\n\r\n[*Clump*](http://getclump.io/), which is deeply inspired by *Stitch*, was just recently open-sourced by developers from SoundCloud.\r\nSimilarly to *Stitch* it provides an easy to use declarative approach focusing on *what* to fetch instead of *how* to fetch it.\r\nPerformance is then enhanced by means of bulk requests, parallel requests to multiple sources and an underlying caching layer.\r\n\r\n\r\n## The composition proxy\r\n\r\nThe composition proxy attempts to take the declarative approach of *Stitch* and *Clump* one step further.\r\nFollowing a configuration based approach defining *what* can be fetched, the *how* is totally left open.\r\nInstead, based on a configuration, an entire REST API with some nifty features is automatically generated.\r\n\r\n#### Example: Building a controller from a configuration\r\n\r\n```\r\n  // A shop controller registering the following composition resources:\r\n  //\r\n  // GET /shop/categories/:id\r\n  // GET /shop/categories/:id/products\r\n  // GET /shop/categories/:id/size\r\n  // GET /shop/products/:id\r\n  // GET /shop/products/:id/reviews\r\n  // GET /shop/reviews/:id\r\n  // GET /shop/users/:id\r\n  // GET /shop/users/:id/myreviews\r\n\r\n  lazy val shopController: Controller = CompositionControllerBuilder()\r\n    .register[Category](\"categories\")\r\n    .as(categoryKey, productService.getCategories)\r\n    .having(\r\n      \"products\" -> ToMany(categoryKey, productService.getProductsByCategories),\r\n      \"size\" -> ToOne(categoryKey, productService.getCategorySize)\r\n    )\r\n    .register[Product](\"products\")\r\n    .as(productKey, productService.getProducts)\r\n    .having(\r\n      \"categories\" -> ToOne(categoryKey, productService.getCategories, Array),\r\n      \"reviews\" -> ToMany(productKey, reviewService.getReviewsByProduct)\r\n    )\r\n    .register[Review](\"reviews\")\r\n    .as(reviewKey, reviewService.getReviews)\r\n    .having(\r\n      \"reviewer\" -> ToOne(userKey, userService.getUsers),\r\n      \"product\" -> ToOne(productKey, productService.getProducts),\r\n      \"categories\" -> ToMany(productKey, productService.getCategoriesByProduct)\r\n    )\r\n    .register[User](\"users\")\r\n    .as(userKey, userService.getUsers)\r\n    .having(\r\n      \"myreviews\" -> ToMany(userKey, reviewService.getReviewsByUser)\r\n    )\r\n    .buildController(\"/shop\")\r\n```\r\n\r\n*Fields* as well as *relations* (by means of a RPC call) are returned on demand in order to address the specific information need as well as limitations of an API client.\r\nThat will say service composition is exposed to the client by means of a concise query DSL ([the *properties* DSL](#the-properties-dsl)). Leveraging the query DSL code complexity is significantly reduced both on client as well as the server side.\r\n\r\nEvery *properties* query is translated into an optimized *execution plan* in order to enhance performance as much as possible.\r\nOptimizations taken into account are:\r\n\r\n- reordering of *relations* in order maximize parallelism\r\n- bulk requests (if possible even accross multiple composition levels)\r\n- a caching layer\r\n\r\nWhile this approach is more powerful in it's specific usage case, it obviously is less flexible than the generic DSL of *Clump*.\r\n\r\n### The properties DSL\r\n\r\nInspired by Facebook's [*field expansion (Graph API)*](https://developers.facebook.com/docs/graph-api/using-graph-api/#fieldexpansion), *fields* and *relations* are requested on demand.\r\n\r\nProperties are queried according to the following grammar:\r\n\r\n- Property => *Relation* **|** *Field*\r\n- Field => *AlphaNumericIdentifier*\r\n- Relation => *Field* . ( **(** *Property*, **)** __*__ *Property* )\r\n\r\nwhere Relation is appended to the request as follows: ...?properties= *Relation*\r\n\r\n## Example\r\n\r\nJust a tiny example illustrating the idea of JSON composition to build up a powerful REST API backed by a *microservice* architecture.\r\n\r\nThere's actually no remote services used in this example. However, some fake services shall demonstrate the case.\r\n\r\n### Run the example\r\n\r\n```sbt example/run```\r\n\r\nQueries:\r\n\r\n- Load a product with id and title only<br>\r\n ```curl http://localhost:7070/shop/products/1?properties=product(id,title)```\r\n- Load a product with all its categories, reviews and the reviewer<br>\r\n ```curl http://localhost:7070/shop/products/1?properties=product(id,title,reviews(stars,review,reviewer(username)),categories(id))```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}